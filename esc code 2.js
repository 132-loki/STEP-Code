var FinalDishArr = [];
var getTheEnt = step.getEntityHome().getEntityByID("MailSwitch");
var switchVal = getTheEnt.getValue("MailSwitchSendMails").getSimpleValue();
var refsToDelete = [];
var NoDishinDishtoMenu = "Y";
var NoDishinDishAmd = "Y";
var messString = "<br>Hi All,<br><br>" +
    "Please find below the list of Dish Recipes currently under the <b>Dish to Menu</b> and <b>Dish Recipe Amendment</b> workflows that have been in their respective states for more than 10 days.<br><br>" +
    "These Dish Recipes are currently in the following workflow states for an extended period. Kindly review the details and take necessary action if required.<br><br>";
var footer = 'If you have any questions or need further details, please feel free to reach out to <a href="mailto:WhitbreadSTEPSupport@cognizant.com">WhitbreadSTEPSupport@cognizant.com</a>.<br><br>' +
    'Thank you,<br>' +
    'STEP Team<br>' +
    'This is an Autogenerated Email. PLEASE DO NOT REPLY.<br>';
var mailTypeID = node.getID();
var mailType = step.getEntityHome().getEntityByID(mailTypeID);
var tableTemplate = "<style>" +
    "table {" +
    "   border-collapse: collapse;" +
    "   margin: 20px 0;" +
    "}" +
    "th, td {" +
    "   padding: 8px 12px;" +
    "   text-align: left;" +
    "   border: 1px solid #ddd;" +
    "}" +
    "th {" +
    "   background-color: skyblue;" +
    "   color: white;" +
    "}" +
    "tr:nth-child(even) {" +
    "   background-color: #f2f2f2;" +
    "}" +
    "tr:hover {" +
    "   background-color: #ddd;" +
    "}" +
    "</style>" +
    "<table>" +
    "<thead>" +
    "<tr>" +
    "<th>Workflow Name</th>" +
    "<th>Workflow State</th>" +
    "<th>Dish Recipe ID</th>" +
    "<th>Dish Recipe Name</th>" +
    "<th>Assignee</th>" +
    "<th>No of Days</th>" +
    "</tr>" +
    "</thead>" +
    "<tbody>";

var dishtoMenuStates = [
    "InDevelopment",
    "CompleteCookMethod",
    "MenuMasterLockdownMenuCopy",
    "TechnicalRecipeReview",
    "RevalidateDish",
    "AwaitingCoceptModelReview",
    "ReviewAndApproveDish",
    "AwaitingFullModelReview",
    "Review"
];

var dishRecipeAmendmentStates = [
    "Dish/RecipeBeingAmended",
    "ReviewFeedback",
    "CompleteCookMethod"
];

// Process all references
var allMTRefs = node.getReferencedBy().iterator();
while (allMTRefs.hasNext()) {
    var currMTRef = allMTRefs.next();
    if (currMTRef.getTarget().getID() == mailTypeID) {
        var multiVals = currMTRef.getValue("ProdToMailTypeWorkflowEvent").getSimpleValue().split("<multisep/>");
        multiVals.forEach(function(val) {
            FinalDishArr.push(val);
        });
    }
    refsToDelete.push(currMTRef);
}

var dishtoMenuDishes = [];
var dishRecipeAmendmentDishes = [];

function generateTableContent(dishes, states) {
    var tableContent = "";
    dishes.forEach(function(dishData) {
        var new1 = dishData.dish;
        tableContent += "<tr>" +
            "<td>" + new1[0] + "</td>" +
            "<td>" + new1[1] + "</td>" +
            "<td>" + new1[2] + "</td>" +
            "<td>" + new1[3] + "</td>" +
            "<td>" + new1[4] + "</td>" +
            "<td>" + new1[5] + "</td>" +
            "</tr>";
    });
    return tableContent;
}

FinalDishArr.forEach(function(dish) {
    var new1 = dish.split("#");
    if (new1[0] == "Dish to Menu Workflow") {
        var stateIndex = dishtoMenuStates.indexOf(String(new1[1]));
        if (stateIndex != -1) {
            dishtoMenuDishes.push({
                stateIndex: stateIndex,
                dish: new1
            });
        }
    } else if (new1[0] == "Dish Recipe Amendment Workflow") {
        var stateIndex = dishRecipeAmendmentStates.indexOf(String(new1[1]));
        if (stateIndex != -1) {
            dishRecipeAmendmentDishes.push({
                stateIndex: stateIndex,
                dish: new1
            });
        }
    }
});

dishtoMenuDishes.sort(function(a, b) {
    return a.stateIndex - b.stateIndex;
});

dishRecipeAmendmentDishes.sort(function(a, b) {
    return a.stateIndex - b.stateIndex;
});

var table = tableTemplate;
var table1 = tableTemplate;

if (dishtoMenuDishes.length > 0) {


    table += generateTableContent(dishtoMenuDishes, dishtoMenuStates);
    table += "</tbody></table>";
    logger.info(" 133 " + table);
    messString += "<b>Dish to Menu Workflow - </b><br>" + table + "<br>";
} else {
    messString = messString + "<b>Dish to Menu Workflow - </b><br>" + "<br>" + "No Dish Recipe in Workflow for over 10 days.<br>" + "<br>";
}
logger.info(" messString 136:" + messString);
if (dishRecipeAmendmentDishes.length > 0) {
    table1 += generateTableContent(dishRecipeAmendmentDishes, dishRecipeAmendmentStates);
    table1 += "</tbody></table>";
    messString += "<b>Dish Recipe Amendment Workflow - </b><br>" + table1 + "<br>" + footer;
} else {
    messString = messString + "<b>Dish Recipe Amendment Workflow - </b><br>" + "<br>" + "No Dish Recipe in Workflow for over 10 days.<br>" + "<br>" + footer;
}

var UserList = [];
var AdminUser = step.getGroupHome().getGroupByID("EscalationAdminUsers");
var userList = AdminUser.getUsers().iterator();
while (userList.hasNext()) {
    var currUser = userList.next();
    if (currUser.getEMail()) {
        UserList.push(currUser.getEMail());
    }
}

var Users = UserList.join(";");

// Send the email
var mailer = mailHome.mail();
mailer.addTo(Users);
mailer.from("noreply@cloudmail.stibo.com");
mailer.subject("Dish Recipes in Workflow States for Over 10 Days");
mailer.htmlMessage(messString);
mailer.send();